Main method disinda bir listteki elemanlari console'a yazdiran kodumuzu olusturalim.

public static printElements(List<String> myList) olarak methodumuzu olusturduk. Listimizi import ettik.
for each loop kullandik. sadece listimizi for each icinde String w'ya assign ettik. Sout icinde w+ " " yazdik.
Bu methoda bir List vermeliyiz.  Main method icine myList isimli String List olusturduk. Listimize add methodu ile elemanlar ekledik. methodu parantezi icine myList ekleyerek cagirdik.
Calistirinca ekrana elemanlar yazildi. Bu birinci yoldu.

Ikinci Yolumuz:  Burada Lambda'dan faydalanacagiz. Ayni methodu alip, List'in yapisini stream yapmasini isteyecegiz.
Boylelikle bircok methodu kullanabiliriz. Ornek: myList.stream().forEach();
Buarada myList'i stream'e cevirdik ve for each methodunu kullanmasini istedik. for each methodu icine
t-> System.out.print(t); yazdik. Kodu bu sekilde calistirinca birinci yoldaki ile ayni sonucu ekrana yazdi.

myList'imizde Tom, Jim, Clara var. stream ile listin [Tom, Jim, Clara] yapisi yukaridan asagiya olacak sekilde
degisti. Tom
         Jim
         Clara

  stream'a donusunce for each ilk elemani alip t icine koyuyor. Biz java'ya print t deyince buaraya Tom yaziyor.
  Sonra for each gelip ikinci elamani aliyor. javaya print deyince Jim yazdiriyor ve devaminda Clara'yi bu sekilde yazdiriyor.
  Her yazdirmada bir bosluk birakiyor.

Ilk yolumuzda uc katli bir yapi olusturuyoruz. Buna yapisal kod denir. Mimari bir yapi olusturduk.
Ikinci yolda ise sadece for each dedik.
Burada bir yapi olusturmak yerine javaya direct methodun ismini veriyoruz. Bu proglama tarzina functional programming denir

Example 5: Bir Listteki charcter sayisi 4 den cok olan tum elamanlari tekrarsiz olarak kucuk harflerle
consol'a yazdiran methodu olusturun.
Bu soruda cok sey isteniyor. Lambda ile kisa surede yapabiliriz.

Yukaridaki listimize daha sonra bir tane daha Tom, bir tane daha Clara ve bir Angelina ekledik.

public static void printElLengthMoreThanFourUniqueLowerCase(List<String> myLIst)
Listimizde tam 6 eleman vardi. Sirasiyla 4'ten kucuk olanlari daha sonra birden fazla olanlarin tekrarli olanlarini
iptal ettik. Once listi stream'e cevirdik ve filtreleme isini yaptirdik. Bu kismda elemanlardan Tom ve Jim'i iptal etti.
Neyi eleyecek? length'i 4'ten kucuk olanlar elendi devaminda distinct methodunu kullandik. Cunku tekrarli olanlari bir kez yazmasini istedik. Clara iki kez vardi.
Clara'yi bire dusurdu. map'i yazarak toLowerCase methodunu
alabildik, aldigi elemanlarin karakterlerini kucuk harfle yazdik. forEach methodu icine sout, onun da icine t'yi yazdik. Main method icine gidip methodu yazinca
ekranda clara angelina'yi gorduk. Diger elemanlardan birer tane daha vardi.

Elemanlari azaltan methodlar genellikle once kullanilir.
Yazdigimiz kod buyudukce okumak zorlasir. Functional programming sayesinde kodumuzu daha okunur hale getirmis oluruz.

Example 6: Bir listteki elemanlarini tekrarsiz ve buyuk harflerele alfabetik sirada consol'e yazdiran methodu
olusturun.

public static void printElUniqueToUpperCaseSorted(List<String> myList)
Burada eleme yapmayacagiz. Her zamanki gibi stream ile baslayalim. Ancak kodumuzu yan yana okunacak sekilde
degil, alt alta siralayalim.
{
   myList.stream().
           distinct().
           map(t->t.toUpperCase()).
           sorted().//Alfabetik siraya gore dizer
           forEach(t -> System.out.print(t + " "));

}
methodu main method icinde cagirdik ve ekranda ANGELINA CLARA JIM TOM gorduk